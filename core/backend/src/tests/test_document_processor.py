import sys
import os

# Add project root to PYTHONPATH to allow imports from src
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
sys.path.insert(0, project_root)

from src.plugins.document_processor import DocumentProcessor

# DocumentProcessor does not require ApiKeyManager for its local operations

def main():
    print("--- Testing DocumentProcessor Plugin ---")
    doc_processor = DocumentProcessor()

    test_dir = os.path.dirname(__file__)
    test_docx_path = os.path.join(test_dir, "test_document_apex.docx")
    test_pptx_path = os.path.join(test_dir, "test_presentation_apex.pptx")
    test_pdf_path = os.path.join(test_dir, "test_output_apex.pdf")
    text_for_docs = "ApexAgent Document Test\nThis is line one.\nThis is line two with some more content."

    # --- DOCX Tests ---
    print("\n--- Testing DOCX Functionality ---")
    # Test create_docx_from_text
    print(f"Creating DOCX: {test_docx_path}")
    create_docx_result = doc_processor.create_docx_from_text(text_content=text_for_docs, save_path=test_docx_path, title="ApexAgent DOCX Test")
    assert create_docx_result and create_docx_result.get("status") == "success" and os.path.exists(test_docx_path), "create_docx_from_text failed"
    print("Create DOCX Result:", create_docx_result)

    # Test read_docx_text
    read_docx_result = doc_processor.read_docx_text(file_path=test_docx_path)
    assert read_docx_result and "text_content" in read_docx_result, "read_docx_text failed"
    print("Read DOCX Content:", read_docx_result["text_content"][:100] + "...") # Print snippet
    assert text_for_docs in read_docx_result["text_content"], "Created DOCX content mismatch"

    # Test append_to_docx
    appended_text = "This is an appended paragraph for the DOCX test."
    append_docx_result = doc_processor.append_to_docx(file_path=test_docx_path, content_to_append=appended_text, content_type="paragraph")
    assert append_docx_result and append_docx_result.get("status") == "success", "append_to_docx failed"
    print("Append DOCX Result:", append_docx_result)
    read_appended_docx_result = doc_processor.read_docx_text(file_path=test_docx_path)
    assert appended_text in read_appended_docx_result["text_content"], "Appended content not found in DOCX"
    print("Read Appended DOCX Content:", read_appended_docx_result["text_content"][:200] + "...")

    if os.path.exists(test_docx_path):
        os.remove(test_docx_path)
        print(f"Cleaned up {test_docx_path}")

    # --- PPTX Tests ---
    print("\n--- Testing PPTX Functionality ---")
    slides_data = [
        {"title": "ApexAgent Slide 1", "content": "Content for the first slide.\nMultiple lines are supported."},
        {"title": "ApexAgent Slide 2", "content": ["Bullet 1 for slide 2", "Bullet 2 for slide 2"]}
    ]
    # Test create_pptx_from_slides_data
    print(f"Creating PPTX: {test_pptx_path}")
    create_pptx_result = doc_processor.create_pptx_from_slides_data(slides_data=slides_data, save_path=test_pptx_path)
    assert create_pptx_result and create_pptx_result.get("status") == "success" and os.path.exists(test_pptx_path), "create_pptx_from_slides_data failed"
    print("Create PPTX Result:", create_pptx_result)

    # Test read_pptx_text
    read_pptx_result = doc_processor.read_pptx_text(file_path=test_pptx_path)
    assert read_pptx_result and "slides_text" in read_pptx_result and len(read_pptx_result["slides_text"]) == len(slides_data), "read_pptx_text failed or slide count mismatch"
    print("Read PPTX Slides Content (Snippets):")
    for i, slide_text in enumerate(read_pptx_result["slides_text"]):
        print(f"  Slide {i+1}: {slide_text[:100]}...")
        assert slides_data[i]["title"] in slide_text, f"Title of slide {i+1} not found in PPTX content"

    if os.path.exists(test_pptx_path):
        os.remove(test_pptx_path)
        print(f"Cleaned up {test_pptx_path}")

    # --- PDF Tests ---
    print("\n--- Testing PDF Functionality ---")
    pdf_text_content = "This is a test PDF generated by ApexAgent DocumentProcessor.\nIt contains several lines of text to verify PDF creation and text extraction."
    # Test convert_text_to_pdf
    print(f"Creating PDF: {test_pdf_path}")
    create_pdf_result = doc_processor.convert_text_to_pdf(text_content=pdf_text_content, save_path=test_pdf_path, title="ApexAgent PDF Test")
    assert create_pdf_result and create_pdf_result.get("status") == "success" and os.path.exists(test_pdf_path), "convert_text_to_pdf failed"
    print("Convert Text to PDF Result:", create_pdf_result)

    # Test extract_text_from_pdf
    extract_pdf_result = doc_processor.extract_text_from_pdf(file_path=test_pdf_path)
    assert extract_pdf_result and "text_content" in extract_pdf_result, "extract_text_from_pdf failed"
    print("Extracted PDF Content:", extract_pdf_result["text_content"][:150] + "...")
    # Note: PDF text extraction can be tricky with line breaks and formatting. 
    # A simple substring check is a basic verification.
    assert "This is a test PDF generated by ApexAgent" in extract_pdf_result["text_content"], "Content mismatch in extracted PDF text"

    if os.path.exists(test_pdf_path):
        os.remove(test_pdf_path)
        print(f"Cleaned up {test_pdf_path}")

    print("\n--- DocumentProcessor Plugin Test Completed Successfully ---")

if __name__ == "__main__":
    main()

